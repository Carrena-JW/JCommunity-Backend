// <auto-generated />
using System;
using JCommunity.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JCommunity.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231213130003_231213_05")]
    partial class _231213_05
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JCommunity.AppCore.Entities.Member.Member", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedMemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedMemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MemberStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<string>("TopicAuthorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NickName")
                        .IsUnique();

                    b.HasIndex("TopicAuthorId")
                        .IsUnique();

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("JCommunity.AppCore.Entities.Topics.Topic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedMemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedMemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("topics", (string)null);
                });

            modelBuilder.Entity("JCommunity.AppCore.Entities.Topics.TopicTag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("topic_tags", (string)null);
                });

            modelBuilder.Entity("JCommunity.AppCore.Entities.Topics.TopicTagMap", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("text");

                    b.Property<string>("TopicTagId")
                        .HasColumnType("text");

                    b.HasKey("TopicId", "TopicTagId");

                    b.HasIndex("TopicTagId");

                    b.ToTable("topic_tag_map", (string)null);
                });

            modelBuilder.Entity("JCommunity.AppCore.Entities.Member.Member", b =>
                {
                    b.HasOne("JCommunity.AppCore.Entities.Topics.Topic", null)
                        .WithOne()
                        .HasForeignKey("JCommunity.AppCore.Entities.Member.Member", "TopicAuthorId")
                        .HasPrincipalKey("JCommunity.AppCore.Entities.Topics.Topic", "AuthorId");
                });

            modelBuilder.Entity("JCommunity.AppCore.Entities.Topics.TopicTagMap", b =>
                {
                    b.HasOne("JCommunity.AppCore.Entities.Topics.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JCommunity.AppCore.Entities.Topics.TopicTag", null)
                        .WithMany()
                        .HasForeignKey("TopicTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
